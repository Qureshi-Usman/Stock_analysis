# -*- coding: utf-8 -*-
"""Model1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WI_iNMdjyYFM6sQysECSnK0Hm4Ngp-G7
"""

"""### Stock Market Prediction And Forecasting Using Stacked LSTM"""

# STACKED LSTM MODEL
import pickle
### Data Collection
RANGE = ('2015-01-01','2023-03-22')
STOCK = 'ASIANPAINT.NS'

import yahoo_fin.stock_info as si
import pandas as pd


# Creating Empty DF
dates = pd.date_range(RANGE[0],RANGE[1])
emptyDF = pd.DataFrame(index=dates)


# Historical Data
hist_data = si.get_data(STOCK,start_date=RANGE[0],end_date=RANGE[1])

# removing ticker col
hist_data = hist_data.iloc[:,:-1]

data = emptyDF.join(hist_data)

# Droping Na
data = data.dropna()

# print(data)
# # Income Statement
# i_data = si.get_income_statement(TICKER)
# Transforming and Sorting Data wise
# i_data = i_data.transpose()[::-1]
# data = data.join(i_data)

# data.iloc[:,6:]=data.iloc[:,6:].ffill()
# data.iloc[:,6:]=data.iloc[:,6:].bfill()


# data.dropna(how='all', axis=1, inplace=True)
# data = data.dropna(how='any')
# data.to_csv('data.csv')

# Extracting Close
close = data.reset_index()['close']
# print(close)
# print(close.shape)

# Plotting The Graph
# import matplotlib.pyplot as plt
# close.plot(title="Stock Price")
# plt.xlabel("nth day")
# plt.ylabel("INR")

# Scaling using MinMaxScaler
from sklearn.preprocessing import MinMaxScaler

scaler=MinMaxScaler(feature_range=(0,1))

close = scaler.fit_transform(close.values.reshape(-1,1))

# print(close)

##splitting dataset into train and test split
training_size=int(len(close)*0.70)

test_size=len(close)-training_size

print(training_size,test_size)

train_data,test_data=close[0:training_size,:],close[training_size:len(close),:1]

# convert an array of values into a dataset matrix

import numpy as np
def create_dataset(dataset, time_step=1):
	dataX, dataY = [], []
	for i in range(len(dataset)-time_step-1):
		a = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 
		dataX.append(a)
		dataY.append(dataset[i + time_step, 0])
	return np.array(dataX), np.array(dataY)

# reshape into X=t,t+1,t+2,t+3 and Y=t+4
time_step = 100
X_train, y_train = create_dataset(train_data, time_step)
X_test, ytest = create_dataset(test_data, time_step)

# print(X_train.shape)
# print(y_train.shape)

# print(X_test.shape)
# print(ytest.shape)

# reshape input to be [samples, time steps, features] which is required for LSTM
X_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)
X_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)

# pip install tensorflow

### Create the Stacked LSTM model
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(time_step,1)))
model.add(LSTM(50,return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')

model.summary()

model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=100,batch_size=64,verbose=1)


# Pickle the model
with open(f"lstm_models/{STOCK}.pkl", 'wb') as f:
    pickle.dump(model, f)

